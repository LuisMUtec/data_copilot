{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# GrowthMate AI - Business Analytics Chatbot\n\n## Overview\n\nGrowthMate AI is a full-stack chatbot application designed for entrepreneurs to perform business analytics through natural language queries. The application combines a Node.js/Express backend with a React/Vite frontend to provide real-time data analysis and visualization capabilities. Users can ask questions in plain English about their business data, and the system translates these queries into structured data operations, generates visualizations, and provides actionable insights.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with Vite for fast development and hot module replacement\n- **TypeScript**: Type-safe development with comprehensive type definitions\n- **UI Framework**: Radix UI components with shadcn/ui design system for consistent, accessible interface\n- **Styling**: Tailwind CSS with custom CSS variables for theming and responsive design\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Charts**: Recharts library for data visualization components\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API endpoints\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **Authentication**: JWT-based authentication with access and refresh tokens\n- **Password Security**: bcryptjs for secure password hashing\n- **AI Integration**: OpenAI GPT-4o for natural language processing and query analysis\n- **Data Processing**: Custom services for query processing, data source management, and visualization generation\n\n### Database Design\n- **PostgreSQL**: Primary database with Neon serverless connection\n- **Schema**: Comprehensive table structure including users, conversations, messages, data sources, queries, visualizations, and templates\n- **Relationships**: Proper foreign key relationships with cascade delete for data integrity\n- **Migration**: Drizzle Kit for database schema management and migrations\n\n### Authentication & Security\n- **JWT Tokens**: Dual-token system with short-lived access tokens (15 minutes) and longer refresh tokens (7 days)\n- **Password Hashing**: bcryptjs with salt rounds for secure password storage\n- **Middleware**: Authentication middleware for protected routes\n- **Session Management**: Secure token storage and automatic refresh mechanisms\n\n### Data Source Integration\n- **Google Sheets**: API integration for spreadsheet data access\n- **Multiple Sources**: Extensible architecture supporting PostgreSQL, CSV, and generic API connections\n- **Configuration**: JSON-based configuration storage for flexible data source management\n- **Validation**: Connection testing and data validation before processing\n\n### Natural Language Processing\n- **OpenAI Integration**: GPT-4o model for analyzing user queries and generating insights\n- **Query Analysis**: Structured extraction of intent, entities, query type, and visualization suggestions\n- **Business Context**: Specialized prompts optimized for entrepreneurial and business analytics use cases\n- **Response Generation**: AI-generated summaries, key insights, and recommendations\n\n### Real-time Features\n- **Chat Interface**: Interactive conversation system with message history\n- **Processing Feedback**: Real-time status updates during query processing\n- **Auto-scroll**: Automatic message scrolling for better user experience\n\n## External Dependencies\n\n### Frontend Dependencies\n- **@radix-ui/***: Comprehensive set of accessible UI components for building the interface\n- **@tanstack/react-query**: Server state management and caching solution\n- **@hookform/resolvers**: Integration between React Hook Form and validation libraries\n- **recharts**: Chart library for data visualization components\n- **tailwindcss**: Utility-first CSS framework for styling\n- **wouter**: Lightweight routing solution for single-page application navigation\n- **zod**: TypeScript-first schema validation library\n\n### Backend Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless database driver\n- **drizzle-orm**: Type-safe ORM for database operations\n- **bcryptjs**: Password hashing library for security\n- **jsonwebtoken**: JWT token generation and verification\n- **openai**: Official OpenAI SDK for AI integration\n- **googleapis**: Google APIs client library for Sheets integration\n\n### Development Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Type checking and compilation\n- **drizzle-kit**: Database schema management and migration tool\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting\n- **OpenAI API**: GPT-4o model access for natural language processing\n- **Google Sheets API**: Integration for spreadsheet data sources\n\n### Optional Integrations\n- **Socket.io**: WebSocket support for real-time features (architecture prepared)\n- **Chart Export**: Server-side rendering capabilities for chart export functionality\n- **Email Services**: User notification and communication systems","size_bytes":5414},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcryptjs\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { authenticateToken, generateTokens, verifyRefreshToken, type AuthenticatedRequest } from \"./middleware/auth\";\nimport { queryProcessorService } from \"./services/queryProcessor\";\nimport { googleSheetsService } from \"./services/googleSheets\";\nimport { visualizationService } from \"./services/visualizationService\";\nimport { openaiService } from \"./services/openai\";\nimport { insertUserSchema, insertConversationSchema, insertDataSourceSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth Routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, email, password } = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n      \n      // Create user\n      const user = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n      });\n\n      // Generate tokens\n      const { accessToken, refreshToken } = generateTokens(user.id);\n\n      res.status(201).json({\n        message: \"User created successfully\",\n        user: { id: user.id, username: user.username, email: user.email },\n        accessToken,\n        refreshToken,\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Registration failed\", error: (error as Error).message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = z.object({\n        email: z.string().email(),\n        password: z.string().min(1),\n      }).parse(req.body);\n\n      // Find user\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Verify password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Generate tokens\n      const { accessToken, refreshToken } = generateTokens(user.id);\n\n      res.json({\n        message: \"Login successful\",\n        user: { id: user.id, username: user.username, email: user.email },\n        accessToken,\n        refreshToken,\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Login failed\", error: (error as Error).message });\n    }\n  });\n\n  app.post(\"/api/auth/refresh\", async (req, res) => {\n    try {\n      const { refreshToken } = z.object({\n        refreshToken: z.string(),\n      }).parse(req.body);\n\n      const decoded = verifyRefreshToken(refreshToken);\n      if (!decoded) {\n        return res.status(403).json({ message: \"Invalid refresh token\" });\n      }\n\n      const user = await storage.getUser(decoded.userId);\n      if (!user) {\n        return res.status(403).json({ message: \"User not found\" });\n      }\n\n      const { accessToken, refreshToken: newRefreshToken } = generateTokens(user.id);\n\n      res.json({ accessToken, refreshToken: newRefreshToken });\n    } catch (error) {\n      res.status(400).json({ message: \"Token refresh failed\", error: (error as Error).message });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      res.json(req.user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user info\", error: (error as Error).message });\n    }\n  });\n\n  // Conversations Routes\n  app.get(\"/api/conversations\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const conversations = await storage.getConversationsByUserId(req.user!.id);\n      res.json(conversations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch conversations\", error: (error as Error).message });\n    }\n  });\n\n  app.post(\"/api/conversations\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { title } = insertConversationSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n\n      const conversation = await storage.createConversation({\n        userId: req.user!.id,\n        title,\n      });\n\n      res.status(201).json(conversation);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create conversation\", error: (error as Error).message });\n    }\n  });\n\n  app.get(\"/api/conversations/:id/messages\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const messages = await storage.getMessagesByConversationId(id);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\", error: (error as Error).message });\n    }\n  });\n\n  // Chat Query Routes\n  app.post(\"/api/chat/query\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { query, conversationId, dataSourceId } = z.object({\n        query: z.string().min(1),\n        conversationId: z.string().uuid(),\n        dataSourceId: z.string().uuid().optional(),\n      }).parse(req.body);\n\n      // Add user message to conversation\n      await storage.createMessage({\n        conversationId,\n        role: \"user\",\n        content: query,\n      });\n\n      // Process the query\n      const result = await queryProcessorService.processNaturalLanguageQuery(\n        req.user!.id,\n        conversationId,\n        query,\n        dataSourceId\n      );\n\n      // Create AI response message\n      const responseContent = {\n        summary: result.insights.summary,\n        keyInsights: result.insights.keyInsights,\n        recommendations: result.insights.recommendations,\n        visualization: result.visualization,\n        queryId: result.queryId,\n      };\n\n      await storage.createMessage({\n        conversationId,\n        role: \"assistant\",\n        content: JSON.stringify(responseContent),\n        metadata: {\n          queryId: result.queryId,\n          hasVisualization: !!result.visualization,\n        } as any,\n      });\n\n      res.json({\n        message: \"Query processed successfully\",\n        result: {\n          insights: result.insights,\n          visualization: result.visualization,\n          queryId: result.queryId,\n        },\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Query processing failed\", error: (error as Error).message });\n    }\n  });\n\n  // Data Sources Routes\n  app.get(\"/api/data-sources\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const dataSources = await storage.getDataSourcesByUserId(req.user!.id);\n      res.json(dataSources);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch data sources\", error: (error as Error).message });\n    }\n  });\n\n  app.post(\"/api/data-sources\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const dataSourceData = insertDataSourceSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n\n      // Validate connection before saving\n      if (dataSourceData.type === \"google_sheets\") {\n        const isValid = await googleSheetsService.validateConnection(dataSourceData.config as any);\n        if (!isValid) {\n          return res.status(400).json({ message: \"Invalid Google Sheets configuration\" });\n        }\n      }\n\n      const dataSource = await storage.createDataSource(dataSourceData);\n      res.status(201).json(dataSource);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create data source\", error: (error as Error).message });\n    }\n  });\n\n  app.put(\"/api/data-sources/:id\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      const dataSource = await storage.updateDataSource(id, updates);\n      if (!dataSource) {\n        return res.status(404).json({ message: \"Data source not found\" });\n      }\n\n      res.json(dataSource);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update data source\", error: (error as Error).message });\n    }\n  });\n\n  app.delete(\"/api/data-sources/:id\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteDataSource(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Data source not found\" });\n      }\n\n      res.json({ message: \"Data source deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete data source\", error: (error as Error).message });\n    }\n  });\n\n  // Export Routes\n  app.post(\"/api/export/chart\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { chartData, chartType, format } = z.object({\n        chartData: z.any(),\n        chartType: z.string(),\n        format: z.enum([\"png\", \"pdf\", \"svg\", \"json\"]),\n      }).parse(req.body);\n\n      const result = await visualizationService.exportChart(chartData, chartType, { format });\n\n      res.set({\n        \"Content-Type\": result.contentType,\n        \"Content-Disposition\": `attachment; filename=\"${result.filename}\"`,\n      });\n\n      if (typeof result.data === \"string\") {\n        res.send(result.data);\n      } else {\n        res.send(result.data);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Export failed\", error: (error as Error).message });\n    }\n  });\n\n  // Templates Routes\n  app.get(\"/api/templates\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      \n      const templates = category \n        ? await storage.getTemplatesByCategory(category as string)\n        : await storage.getTemplates();\n      \n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch templates\", error: (error as Error).message });\n    }\n  });\n\n  // Health Check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10426},"server/storage.ts":{"content":"import {\n  users,\n  conversations,\n  messages,\n  dataSources,\n  queries,\n  visualizations,\n  templates,\n  type User,\n  type InsertUser,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type DataSource,\n  type InsertDataSource,\n  type Query,\n  type InsertQuery,\n  type Visualization,\n  type InsertVisualization,\n  type Template,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Conversations\n  getConversationsByUserId(userId: string): Promise<Conversation[]>;\n  getConversation(id: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined>;\n  deleteConversation(id: string): Promise<boolean>;\n\n  // Messages\n  getMessagesByConversationId(conversationId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n\n  // Data Sources\n  getDataSourcesByUserId(userId: string): Promise<DataSource[]>;\n  getDataSource(id: string): Promise<DataSource | undefined>;\n  createDataSource(dataSource: InsertDataSource): Promise<DataSource>;\n  updateDataSource(id: string, updates: Partial<DataSource>): Promise<DataSource | undefined>;\n  deleteDataSource(id: string): Promise<boolean>;\n\n  // Queries\n  getQueriesByUserId(userId: string): Promise<Query[]>;\n  getQuery(id: string): Promise<Query | undefined>;\n  createQuery(query: InsertQuery): Promise<Query>;\n\n  // Visualizations\n  getVisualizationsByQueryId(queryId: string): Promise<Visualization[]>;\n  createVisualization(visualization: InsertVisualization): Promise<Visualization>;\n\n  // Templates\n  getTemplates(): Promise<Template[]>;\n  getTemplatesByCategory(category: string): Promise<Template[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Conversations\n  async getConversationsByUserId(userId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.userId, userId))\n      .orderBy(desc(conversations.updatedAt));\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.id, id));\n    return conversation || undefined;\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const [conversation] = await db\n      .insert(conversations)\n      .values(insertConversation)\n      .returning();\n    return conversation;\n  }\n\n  async updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .update(conversations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    return conversation || undefined;\n  }\n\n  async deleteConversation(id: string): Promise<boolean> {\n    const result = await db\n      .delete(conversations)\n      .where(eq(conversations.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Messages\n  async getMessagesByConversationId(conversationId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  // Data Sources\n  async getDataSourcesByUserId(userId: string): Promise<DataSource[]> {\n    return await db\n      .select()\n      .from(dataSources)\n      .where(eq(dataSources.userId, userId))\n      .orderBy(desc(dataSources.createdAt));\n  }\n\n  async getDataSource(id: string): Promise<DataSource | undefined> {\n    const [dataSource] = await db\n      .select()\n      .from(dataSources)\n      .where(eq(dataSources.id, id));\n    return dataSource || undefined;\n  }\n\n  async createDataSource(insertDataSource: InsertDataSource): Promise<DataSource> {\n    const [dataSource] = await db\n      .insert(dataSources)\n      .values(insertDataSource)\n      .returning();\n    return dataSource;\n  }\n\n  async updateDataSource(id: string, updates: Partial<DataSource>): Promise<DataSource | undefined> {\n    const [dataSource] = await db\n      .update(dataSources)\n      .set(updates)\n      .where(eq(dataSources.id, id))\n      .returning();\n    return dataSource || undefined;\n  }\n\n  async deleteDataSource(id: string): Promise<boolean> {\n    const result = await db\n      .delete(dataSources)\n      .where(eq(dataSources.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Queries\n  async getQueriesByUserId(userId: string): Promise<Query[]> {\n    return await db\n      .select()\n      .from(queries)\n      .where(eq(queries.userId, userId))\n      .orderBy(desc(queries.createdAt));\n  }\n\n  async getQuery(id: string): Promise<Query | undefined> {\n    const [query] = await db\n      .select()\n      .from(queries)\n      .where(eq(queries.id, id));\n    return query || undefined;\n  }\n\n  async createQuery(insertQuery: InsertQuery): Promise<Query> {\n    const [query] = await db\n      .insert(queries)\n      .values(insertQuery)\n      .returning();\n    return query;\n  }\n\n  // Visualizations\n  async getVisualizationsByQueryId(queryId: string): Promise<Visualization[]> {\n    return await db\n      .select()\n      .from(visualizations)\n      .where(eq(visualizations.queryId, queryId));\n  }\n\n  async createVisualization(insertVisualization: InsertVisualization): Promise<Visualization> {\n    const [visualization] = await db\n      .insert(visualizations)\n      .values(insertVisualization)\n      .returning();\n    return visualization;\n  }\n\n  // Templates\n  async getTemplates(): Promise<Template[]> {\n    return await db\n      .select()\n      .from(templates)\n      .where(eq(templates.isPublic, true))\n      .orderBy(templates.name);\n  }\n\n  async getTemplatesByCategory(category: string): Promise<Template[]> {\n    return await db\n      .select()\n      .from(templates)\n      .where(and(eq(templates.category, category), eq(templates.isPublic, true)))\n      .orderBy(templates.name);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7328},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, boolean, integer, uuid } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: uuid(\"conversation_id\").notNull().references(() => conversations.id, { onDelete: \"cascade\" }),\n  role: text(\"role\", { enum: [\"user\", \"assistant\"] }).notNull(),\n  content: text(\"content\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const dataSources = pgTable(\"data_sources\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  type: text(\"type\", { enum: [\"google_sheets\", \"postgresql\", \"csv\", \"api\"] }).notNull(),\n  config: jsonb(\"config\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  lastSyncAt: timestamp(\"last_sync_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const queries = pgTable(\"queries\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  conversationId: uuid(\"conversation_id\").references(() => conversations.id, { onDelete: \"set null\" }),\n  originalQuery: text(\"original_query\").notNull(),\n  processedQuery: text(\"processed_query\"),\n  queryType: text(\"query_type\"),\n  dataSourceId: uuid(\"data_source_id\").references(() => dataSources.id),\n  results: jsonb(\"results\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const visualizations = pgTable(\"visualizations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  queryId: uuid(\"query_id\").notNull().references(() => queries.id, { onDelete: \"cascade\" }),\n  type: text(\"type\", { enum: [\"bar\", \"line\", \"pie\", \"scatter\", \"area\"] }).notNull(),\n  config: jsonb(\"config\").notNull(),\n  data: jsonb(\"data\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const templates = pgTable(\"templates\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(),\n  prompt: text(\"prompt\").notNull(),\n  isPublic: boolean(\"is_public\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  conversations: many(conversations),\n  dataSources: many(dataSources),\n  queries: many(queries),\n}));\n\nexport const conversationsRelations = relations(conversations, ({ one, many }) => ({\n  user: one(users, {\n    fields: [conversations.userId],\n    references: [users.id],\n  }),\n  messages: many(messages),\n  queries: many(queries),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  conversation: one(conversations, {\n    fields: [messages.conversationId],\n    references: [conversations.id],\n  }),\n}));\n\nexport const dataSourcesRelations = relations(dataSources, ({ one, many }) => ({\n  user: one(users, {\n    fields: [dataSources.userId],\n    references: [users.id],\n  }),\n  queries: many(queries),\n}));\n\nexport const queriesRelations = relations(queries, ({ one, many }) => ({\n  user: one(users, {\n    fields: [queries.userId],\n    references: [users.id],\n  }),\n  conversation: one(conversations, {\n    fields: [queries.conversationId],\n    references: [conversations.id],\n  }),\n  dataSource: one(dataSources, {\n    fields: [queries.dataSourceId],\n    references: [dataSources.id],\n  }),\n  visualizations: many(visualizations),\n}));\n\nexport const visualizationsRelations = relations(visualizations, ({ one }) => ({\n  query: one(queries, {\n    fields: [visualizations.queryId],\n    references: [queries.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDataSourceSchema = createInsertSchema(dataSources).omit({\n  id: true,\n  createdAt: true,\n  lastSyncAt: true,\n});\n\nexport const insertQuerySchema = createInsertSchema(queries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVisualizationSchema = createInsertSchema(visualizations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTemplateSchema = createInsertSchema(templates).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type DataSource = typeof dataSources.$inferSelect;\nexport type InsertDataSource = z.infer<typeof insertDataSourceSchema>;\nexport type Query = typeof queries.$inferSelect;\nexport type InsertQuery = z.infer<typeof insertQuerySchema>;\nexport type Visualization = typeof visualizations.$inferSelect;\nexport type InsertVisualization = z.infer<typeof insertVisualizationSchema>;\nexport type Template = typeof templates.$inferSelect;\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\n","size_bytes":6309},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"./hooks/useAuth\";\nimport LoginPage from \"@/pages/login\";\nimport DashboardPage from \"@/pages/dashboard\";\nimport ChatPage from \"@/pages/chat\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-purple-600 rounded-lg flex items-center justify-center mx-auto mb-3\">\n            <div className=\"w-4 h-4 bg-white rounded-full animate-pulse\"></div>\n          </div>\n          <p className=\"text-sm text-gray-600\">Loading GrowthMate AI...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <LoginPage />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={DashboardPage} />\n      <Route path=\"/chat\" component={ChatPage} />\n      <Route path=\"/chat/:conversationId\" component={ChatPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1543},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"../storage\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || \"your-refresh-secret\";\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    username: string;\n    email: string;\n  };\n}\n\nexport function generateTokens(userId: string) {\n  const accessToken = jwt.sign({ userId }, JWT_SECRET, { expiresIn: \"15m\" });\n  const refreshToken = jwt.sign({ userId }, JWT_REFRESH_SECRET, { expiresIn: \"7d\" });\n  \n  return { accessToken, refreshToken };\n}\n\nexport function verifyToken(token: string): { userId: string } | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\n    return decoded;\n  } catch {\n    return null;\n  }\n}\n\nexport function verifyRefreshToken(token: string): { userId: string } | null {\n  try {\n    const decoded = jwt.verify(token, JWT_REFRESH_SECRET) as { userId: string };\n    return decoded;\n  } catch {\n    return null;\n  }\n}\n\nexport async function authenticateToken(\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  const decoded = verifyToken(token);\n  if (!decoded) {\n    return res.status(403).json({ message: \"Invalid or expired token\" });\n  }\n\n  try {\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(403).json({ message: \"User not found\" });\n    }\n\n    req.user = {\n      id: user.id,\n      username: user.username,\n      email: user.email,\n    };\n\n    next();\n  } catch (error) {\n    return res.status(500).json({ message: \"Authentication error\" });\n  }\n}\n\nexport function optionalAuth(\n  req: AuthenticatedRequest,\n  res: Response,\n  next: NextFunction\n) {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (token) {\n    const decoded = verifyToken(token);\n    if (decoded) {\n      storage.getUser(decoded.userId).then(user => {\n        if (user) {\n          req.user = {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n          };\n        }\n        next();\n      }).catch(() => next());\n    } else {\n      next();\n    }\n  } else {\n    next();\n  }\n}\n","size_bytes":2510},"server/services/gemini.ts":{"content":"import { GoogleGenerativeAI } from '@google/generative-ai';\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\n\ninterface QueryAnalysis {\n  intent: string;\n  entities: string[];\n  queryType: \"metrics\" | \"comparison\" | \"trend\" | \"distribution\" | \"correlation\";\n  timeframe?: string;\n  filters?: Record<string, any>;\n  suggestedVisualization: \"bar\" | \"line\" | \"pie\" | \"scatter\" | \"area\";\n}\n\ninterface ChartInsights {\n  summary: string;\n  keyInsights: string[];\n  recommendations: string[];\n}\n\nexport class GeminiService {\n  private model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n  async analyzeNaturalLanguageQuery(query: string): Promise<QueryAnalysis> {\n    try {\n      const prompt = `You are an expert business analyst that converts natural language queries into structured data analysis requests.\n            \n      Analyze the user's query and extract:\n      - intent: what they want to understand\n      - entities: key business terms, metrics, dimensions mentioned\n      - queryType: metrics (single values), comparison (comparing categories), trend (over time), distribution (breakdown), correlation (relationships)\n      - timeframe: any time period mentioned\n      - filters: conditions or constraints\n      - suggestedVisualization: best chart type for this analysis\n      \n      Focus on entrepreneurial and business analytics contexts. Common metrics include revenue, customers, conversion rates, growth, retention, etc.\n      \n      Respond with JSON in this exact format:\n      {\n        \"intent\": \"string describing what user wants to know\",\n        \"entities\": [\"array\", \"of\", \"key\", \"terms\"],\n        \"queryType\": \"metrics|comparison|trend|distribution|correlation\",\n        \"timeframe\": \"string or null\",\n        \"filters\": {},\n        \"suggestedVisualization\": \"bar|line|pie|scatter|area\"\n      }\n\n      User query: \"${query}\"`;\n\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n      \n      // Parse JSON from response\n      const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error(\"Invalid JSON response\");\n      }\n      \n      return JSON.parse(jsonMatch[0]);\n    } catch (error) {\n      throw new Error(\"Failed to analyze query: \" + (error as Error).message);\n    }\n  }\n\n  async generateDataQuery(\n    naturalLanguageQuery: string, \n    analysis: QueryAnalysis, \n    dataSourceSchema: any\n  ): Promise<string> {\n    try {\n      const prompt = `You are an expert in converting business analytics requests into data queries.\n            \n      Given a natural language query, its analysis, and the data schema, generate the appropriate query.\n      For PostgreSQL, generate SQL. For Google Sheets, generate A1 notation ranges or formulas.\n      \n      Focus on business metrics and entrepreneurial data analysis.\n      Always include proper aggregations, grouping, and filtering as needed.\n      \n      Return only the query string, no explanations.\n\n      Natural Language Query: ${naturalLanguageQuery}\n      \n      Analysis: ${JSON.stringify(analysis)}\n      \n      Data Schema: ${JSON.stringify(dataSourceSchema)}\n      \n      Generate the appropriate query:`;\n\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      return response.text().trim();\n    } catch (error) {\n      throw new Error(\"Failed to generate data query: \" + (error as Error).message);\n    }\n  }\n\n  async generateChartInsights(chartData: any, chartType: string, originalQuery: string): Promise<ChartInsights> {\n    try {\n      const prompt = `You are a business intelligence expert that provides insights from data visualizations.\n            \n      Analyze the chart data and provide:\n      - summary: concise overview of what the data shows\n      - keyInsights: 3-5 specific observations from the data\n      - recommendations: 3-5 actionable business recommendations\n      \n      Focus on entrepreneurial and business growth insights. Look for trends, patterns, outliers, and opportunities.\n      \n      Respond with JSON in this exact format:\n      {\n        \"summary\": \"brief overview of findings\",\n        \"keyInsights\": [\"insight 1\", \"insight 2\", \"insight 3\"],\n        \"recommendations\": [\"recommendation 1\", \"recommendation 2\", \"recommendation 3\"]\n      }\n\n      Original Query: ${originalQuery}\n      Chart Type: ${chartType}\n      Chart Data: ${JSON.stringify(chartData)}\n      \n      Provide business insights and recommendations:`;\n\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n      \n      // Parse JSON from response\n      const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error(\"Invalid JSON response\");\n      }\n      \n      return JSON.parse(jsonMatch[0]);\n    } catch (error) {\n      throw new Error(\"Failed to generate chart insights: \" + (error as Error).message);\n    }\n  }\n\n  async generateConversationTitle(messages: string[]): Promise<string> {\n    try {\n      const prompt = `Generate a concise, descriptive title (max 50 characters) for this business analytics conversation. Focus on the main topic or analysis being discussed.\n\n      Conversation messages:\n      ${messages.join(\"\\n\\n\")}\n\n      Title:`;\n\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      const title = response.text().trim().replace(/['\"]/g, '');\n      \n      return title.length > 50 ? title.substring(0, 50) + \"...\" : title;\n    } catch (error) {\n      return \"Analytics Discussion\";\n    }\n  }\n}\n\nexport const geminiService = new GeminiService();","size_bytes":5768},"server/services/googleSheets.ts":{"content":"import { google } from \"googleapis\";\n\ninterface GoogleSheetsConfig {\n  spreadsheetId: string;\n  range?: string;\n  credentials?: any;\n}\n\ninterface SheetData {\n  headers: string[];\n  rows: any[][];\n  metadata: {\n    spreadsheetId: string;\n    sheetName: string;\n    range: string;\n  };\n}\n\nexport class GoogleSheetsService {\n  private sheets: any;\n\n  constructor() {\n    // Initialize with service account or OAuth credentials\n    const credentials = process.env.GOOGLE_SHEETS_CREDENTIALS \n      ? JSON.parse(process.env.GOOGLE_SHEETS_CREDENTIALS)\n      : undefined;\n\n    if (credentials) {\n      const auth = new google.auth.GoogleAuth({\n        credentials,\n        scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],\n      });\n\n      this.sheets = google.sheets({ version: 'v4', auth });\n    }\n  }\n\n  async validateConnection(config: GoogleSheetsConfig): Promise<boolean> {\n    try {\n      if (!this.sheets) {\n        throw new Error(\"Google Sheets not initialized - missing credentials\");\n      }\n\n      const response = await this.sheets.spreadsheets.get({\n        spreadsheetId: config.spreadsheetId,\n      });\n\n      return !!response.data;\n    } catch (error) {\n      console.error(\"Google Sheets connection validation failed:\", error);\n      return false;\n    }\n  }\n\n  async getSheetData(config: GoogleSheetsConfig): Promise<SheetData> {\n    try {\n      if (!this.sheets) {\n        throw new Error(\"Google Sheets not initialized - missing credentials\");\n      }\n\n      const range = config.range || 'A:Z';\n      \n      const response = await this.sheets.spreadsheets.values.get({\n        spreadsheetId: config.spreadsheetId,\n        range,\n      });\n\n      const values = response.data.values || [];\n      \n      if (values.length === 0) {\n        return {\n          headers: [],\n          rows: [],\n          metadata: {\n            spreadsheetId: config.spreadsheetId,\n            sheetName: 'Sheet1',\n            range,\n          },\n        };\n      }\n\n      const headers = values[0] || [];\n      const rows = values.slice(1);\n\n      return {\n        headers,\n        rows,\n        metadata: {\n          spreadsheetId: config.spreadsheetId,\n          sheetName: this.extractSheetName(range),\n          range,\n        },\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch sheet data: ${(error as Error).message}`);\n    }\n  }\n\n  async getSheetSchema(config: GoogleSheetsConfig): Promise<any> {\n    try {\n      const data = await this.getSheetData(config);\n      \n      if (data.headers.length === 0) {\n        return { columns: [] };\n      }\n\n      // Analyze first few rows to determine column types\n      const sampleRows = data.rows.slice(0, 10);\n      const columns = data.headers.map((header, index) => {\n        const sampleValues = sampleRows\n          .map(row => row[index])\n          .filter(val => val !== undefined && val !== null && val !== '');\n\n        const type = this.inferColumnType(sampleValues);\n        \n        return {\n          name: header,\n          type,\n          index,\n        };\n      });\n\n      return {\n        columns,\n        spreadsheetId: config.spreadsheetId,\n        sheetName: data.metadata.sheetName,\n        totalRows: data.rows.length,\n      };\n    } catch (error) {\n      throw new Error(`Failed to analyze sheet schema: ${(error as Error).message}`);\n    }\n  }\n\n  async executeQuery(config: GoogleSheetsConfig, query: string): Promise<any[]> {\n    try {\n      // For Google Sheets, we'll interpret the query as a range or filter operation\n      // This is a simplified implementation - in a full system you might want to support\n      // more complex query operations\n      \n      const data = await this.getSheetData(config);\n      \n      // Simple implementation: if query contains filtering logic, apply it\n      // Otherwise, return all data\n      if (query.toLowerCase().includes('where') || query.toLowerCase().includes('filter')) {\n        // This would need more sophisticated parsing in a real implementation\n        return this.applySimpleFilters(data, query);\n      }\n\n      // Convert rows to objects using headers\n      return data.rows.map(row => {\n        const obj: any = {};\n        data.headers.forEach((header, index) => {\n          obj[header] = row[index] || null;\n        });\n        return obj;\n      });\n    } catch (error) {\n      throw new Error(`Failed to execute query: ${(error as Error).message}`);\n    }\n  }\n\n  private extractSheetName(range: string): string {\n    const parts = range.split('!');\n    return parts.length > 1 ? parts[0] : 'Sheet1';\n  }\n\n  private inferColumnType(values: any[]): string {\n    if (values.length === 0) return 'text';\n\n    const numericCount = values.filter(val => !isNaN(parseFloat(val)) && isFinite(val)).length;\n    const dateCount = values.filter(val => !isNaN(Date.parse(val))).length;\n\n    const numericRatio = numericCount / values.length;\n    const dateRatio = dateCount / values.length;\n\n    if (numericRatio > 0.8) return 'number';\n    if (dateRatio > 0.8) return 'date';\n    return 'text';\n  }\n\n  private applySimpleFilters(data: SheetData, query: string): any[] {\n    // Simplified filtering - in a real implementation, you'd parse the query properly\n    const rows = data.rows.map(row => {\n      const obj: any = {};\n      data.headers.forEach((header, index) => {\n        obj[header] = row[index] || null;\n      });\n      return obj;\n    });\n\n    // This is a very basic implementation\n    // A full implementation would parse SQL-like syntax or natural language\n    return rows;\n  }\n}\n\nexport const googleSheetsService = new GoogleSheetsService();\n","size_bytes":5612},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"\"\n});\n\ninterface QueryAnalysis {\n  intent: string;\n  entities: string[];\n  queryType: \"metrics\" | \"comparison\" | \"trend\" | \"distribution\" | \"correlation\";\n  timeframe?: string;\n  filters?: Record<string, any>;\n  suggestedVisualization: \"bar\" | \"line\" | \"pie\" | \"scatter\" | \"area\";\n}\n\ninterface ChartInsights {\n  summary: string;\n  keyInsights: string[];\n  recommendations: string[];\n}\n\nexport class OpenAIService {\n  async analyzeNaturalLanguageQuery(query: string): Promise<QueryAnalysis> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an expert business analyst that converts natural language queries into structured data analysis requests.\n            \n            Analyze the user's query and extract:\n            - intent: what they want to understand\n            - entities: key business terms, metrics, dimensions mentioned\n            - queryType: metrics (single values), comparison (comparing categories), trend (over time), distribution (breakdown), correlation (relationships)\n            - timeframe: any time period mentioned\n            - filters: conditions or constraints\n            - suggestedVisualization: best chart type for this analysis\n            \n            Focus on entrepreneurial and business analytics contexts. Common metrics include revenue, customers, conversion rates, growth, retention, etc.\n            \n            Respond with JSON in this exact format:\n            {\n              \"intent\": \"string describing what user wants to know\",\n              \"entities\": [\"array\", \"of\", \"key\", \"terms\"],\n              \"queryType\": \"metrics|comparison|trend|distribution|correlation\",\n              \"timeframe\": \"string or null\",\n              \"filters\": {},\n              \"suggestedVisualization\": \"bar|line|pie|scatter|area\"\n            }`\n          },\n          {\n            role: \"user\",\n            content: query\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      return JSON.parse(response.choices[0].message.content || \"{}\");\n    } catch (error) {\n      throw new Error(\"Failed to analyze query: \" + (error as Error).message);\n    }\n  }\n\n  async generateDataQuery(\n    naturalLanguageQuery: string, \n    analysis: QueryAnalysis, \n    dataSourceSchema: any\n  ): Promise<string> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an expert in converting business analytics requests into data queries.\n            \n            Given a natural language query, its analysis, and the data schema, generate the appropriate query.\n            For PostgreSQL, generate SQL. For Google Sheets, generate A1 notation ranges or formulas.\n            \n            Focus on business metrics and entrepreneurial data analysis.\n            Always include proper aggregations, grouping, and filtering as needed.\n            \n            Return only the query string, no explanations.`\n          },\n          {\n            role: \"user\",\n            content: `Natural Language Query: ${naturalLanguageQuery}\n            \n            Analysis: ${JSON.stringify(analysis)}\n            \n            Data Schema: ${JSON.stringify(dataSourceSchema)}\n            \n            Generate the appropriate query:`\n          }\n        ],\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      throw new Error(\"Failed to generate data query: \" + (error as Error).message);\n    }\n  }\n\n  async generateChartInsights(chartData: any, chartType: string, originalQuery: string): Promise<ChartInsights> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a business intelligence expert that provides insights from data visualizations.\n            \n            Analyze the chart data and provide:\n            - summary: concise overview of what the data shows\n            - keyInsights: 3-5 specific observations from the data\n            - recommendations: 3-5 actionable business recommendations\n            \n            Focus on entrepreneurial and business growth insights. Look for trends, patterns, outliers, and opportunities.\n            \n            Respond with JSON in this exact format:\n            {\n              \"summary\": \"brief overview of findings\",\n              \"keyInsights\": [\"insight 1\", \"insight 2\", \"insight 3\"],\n              \"recommendations\": [\"recommendation 1\", \"recommendation 2\", \"recommendation 3\"]\n            }`\n          },\n          {\n            role: \"user\",\n            content: `Original Query: ${originalQuery}\n            Chart Type: ${chartType}\n            Chart Data: ${JSON.stringify(chartData)}\n            \n            Provide business insights and recommendations:`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      return JSON.parse(response.choices[0].message.content || \"{}\");\n    } catch (error) {\n      throw new Error(\"Failed to generate chart insights: \" + (error as Error).message);\n    }\n  }\n\n  async generateConversationTitle(messages: string[]): Promise<string> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"Generate a concise, descriptive title (max 50 characters) for this business analytics conversation. Focus on the main topic or analysis being discussed.\"\n          },\n          {\n            role: \"user\",\n            content: `Generate a title for this conversation:\\n\\n${messages.join(\"\\n\\n\")}`\n          }\n        ],\n        max_tokens: 20,\n      });\n\n      return response.choices[0].message.content?.trim() || \"Analytics Discussion\";\n    } catch (error) {\n      return \"Analytics Discussion\";\n    }\n  }\n}\n\nexport const openaiService = new OpenAIService();\n","size_bytes":6356},"server/services/queryProcessor.ts":{"content":"import { geminiService } from \"./gemini\";\nimport { googleSheetsService } from \"./googleSheets\";\nimport { storage } from \"../storage\";\nimport type { DataSource, InsertQuery, InsertVisualization } from \"@shared/schema\";\n\ninterface ProcessedQuery {\n  queryId: string;\n  results: any[];\n  visualization?: {\n    type: \"bar\" | \"line\" | \"pie\" | \"scatter\" | \"area\";\n    data: any;\n    config: any;\n  };\n  insights: {\n    summary: string;\n    keyInsights: string[];\n    recommendations: string[];\n  };\n}\n\nexport class QueryProcessorService {\n  async processNaturalLanguageQuery(\n    userId: string,\n    conversationId: string,\n    naturalLanguageQuery: string,\n    dataSourceId?: string\n  ): Promise<ProcessedQuery> {\n    try {\n      // Step 1: Analyze the natural language query\n      const analysis = await geminiService.analyzeNaturalLanguageQuery(naturalLanguageQuery);\n      \n      // Step 2: Determine data source\n      let dataSource: DataSource | undefined;\n      if (dataSourceId) {\n        dataSource = await storage.getDataSource(dataSourceId);\n      } else {\n        // Get the user's primary/active data source\n        const dataSources = await storage.getDataSourcesByUserId(userId);\n        dataSource = dataSources.find(ds => ds.isActive) || dataSources[0];\n      }\n\n      if (!dataSource) {\n        throw new Error(\"No data source available for query processing\");\n      }\n\n      // Step 3: Get data source schema\n      let schema: any;\n      let results: any[] = [];\n\n      if (dataSource.type === \"google_sheets\") {\n        schema = await googleSheetsService.getSheetSchema(dataSource.config as any);\n        \n        // Step 4: Generate specific query for data source\n        const dataQuery = await geminiService.generateDataQuery(\n          naturalLanguageQuery,\n          analysis,\n          schema\n        );\n\n        // Step 5: Execute query against data source\n        results = await googleSheetsService.executeQuery(dataSource.config as any, dataQuery);\n        \n        // Store the processed query\n        const query = await storage.createQuery({\n          userId,\n          conversationId,\n          originalQuery: naturalLanguageQuery,\n          processedQuery: dataQuery,\n          queryType: analysis.queryType,\n          dataSourceId: dataSource.id,\n          results: results as any,\n        });\n\n        // Step 6: Generate visualization if appropriate\n        let visualization;\n        if (results.length > 0 && this.shouldCreateVisualization(analysis.queryType)) {\n          const vizData = this.prepareVisualizationData(results, analysis.suggestedVisualization);\n          \n          visualization = {\n            type: analysis.suggestedVisualization,\n            data: vizData,\n            config: this.generateVisualizationConfig(analysis.suggestedVisualization, vizData),\n          };\n\n          // Store visualization\n          await storage.createVisualization({\n            queryId: query.id,\n            type: analysis.suggestedVisualization,\n            config: visualization.config as any,\n            data: visualization.data as any,\n          });\n        }\n\n        // Step 7: Generate insights\n        const insights = visualization \n          ? await geminiService.generateChartInsights(\n              visualization.data,\n              analysis.suggestedVisualization,\n              naturalLanguageQuery\n            )\n          : {\n              summary: `Found ${results.length} records matching your query.`,\n              keyInsights: [`Retrieved ${results.length} data points`],\n              recommendations: [\"Consider adding filters for more specific results\"],\n            };\n\n        return {\n          queryId: query.id,\n          results,\n          visualization,\n          insights,\n        };\n      } else if (dataSource.type === \"postgresql\") {\n        // Handle PostgreSQL queries\n        throw new Error(\"PostgreSQL data source not implemented yet\");\n      } else {\n        throw new Error(`Unsupported data source type: ${dataSource.type}`);\n      }\n    } catch (error) {\n      throw new Error(`Query processing failed: ${(error as Error).message}`);\n    }\n  }\n\n  private shouldCreateVisualization(queryType: string): boolean {\n    // Don't create visualizations for single metric queries unless they're part of a trend\n    return queryType !== \"metrics\";\n  }\n\n  private prepareVisualizationData(results: any[], chartType: string): any {\n    if (results.length === 0) return [];\n\n    switch (chartType) {\n      case \"pie\":\n        return this.preparePieData(results);\n      case \"bar\":\n      case \"line\":\n        return this.prepareBarLineData(results);\n      case \"scatter\":\n        return this.prepareScatterData(results);\n      case \"area\":\n        return this.prepareAreaData(results);\n      default:\n        return results;\n    }\n  }\n\n  private preparePieData(results: any[]): any[] {\n    // Assuming first column is label, second is value\n    const keys = Object.keys(results[0] || {});\n    if (keys.length < 2) return [];\n\n    const labelKey = keys[0];\n    const valueKey = keys[1];\n\n    return results.map(item => ({\n      name: item[labelKey],\n      value: parseFloat(item[valueKey]) || 0,\n    }));\n  }\n\n  private prepareBarLineData(results: any[]): any[] {\n    // For bar/line charts, we need x and y axis data\n    const keys = Object.keys(results[0] || {});\n    if (keys.length < 2) return [];\n\n    return results.map(item => {\n      const prepared: any = {};\n      keys.forEach(key => {\n        const value = item[key];\n        prepared[key] = isNaN(parseFloat(value)) ? value : parseFloat(value);\n      });\n      return prepared;\n    });\n  }\n\n  private prepareScatterData(results: any[]): any[] {\n    // For scatter plots, we need x and y coordinates\n    const keys = Object.keys(results[0] || {});\n    if (keys.length < 2) return [];\n\n    const xKey = keys[0];\n    const yKey = keys[1];\n\n    return results.map(item => ({\n      x: parseFloat(item[xKey]) || 0,\n      y: parseFloat(item[yKey]) || 0,\n      ...item,\n    }));\n  }\n\n  private prepareAreaData(results: any[]): any[] {\n    // Similar to bar/line but may need stacking\n    return this.prepareBarLineData(results);\n  }\n\n  private generateVisualizationConfig(chartType: string, data: any): any {\n    const baseConfig = {\n      responsive: true,\n      maintainAspectRatio: false,\n    };\n\n    switch (chartType) {\n      case \"pie\":\n        return {\n          ...baseConfig,\n          dataKey: \"value\",\n          nameKey: \"name\",\n        };\n      case \"bar\":\n        return {\n          ...baseConfig,\n          xAxisDataKey: Object.keys(data[0] || {})[0],\n          yAxisDataKey: Object.keys(data[0] || {})[1],\n        };\n      case \"line\":\n        return {\n          ...baseConfig,\n          xAxisDataKey: Object.keys(data[0] || {})[0],\n          yAxisDataKey: Object.keys(data[0] || {})[1],\n        };\n      case \"scatter\":\n        return {\n          ...baseConfig,\n          xAxisDataKey: \"x\",\n          yAxisDataKey: \"y\",\n        };\n      case \"area\":\n        return {\n          ...baseConfig,\n          xAxisDataKey: Object.keys(data[0] || {})[0],\n          yAxisDataKey: Object.keys(data[0] || {})[1],\n        };\n      default:\n        return baseConfig;\n    }\n  }\n}\n\nexport const queryProcessorService = new QueryProcessorService();\n","size_bytes":7271},"server/services/visualizationService.ts":{"content":"interface ChartExportOptions {\n  format: \"png\" | \"pdf\" | \"svg\" | \"json\";\n  width?: number;\n  height?: number;\n  title?: string;\n}\n\ninterface ExportResult {\n  data: Buffer | string;\n  filename: string;\n  contentType: string;\n}\n\nexport class VisualizationService {\n  async exportChart(\n    chartData: any,\n    chartType: string,\n    options: ChartExportOptions\n  ): Promise<ExportResult> {\n    try {\n      switch (options.format) {\n        case \"json\":\n          return this.exportAsJson(chartData, chartType);\n        case \"png\":\n        case \"pdf\":\n        case \"svg\":\n          // In a full implementation, you would use a library like puppeteer\n          // or canvas to render the chart and export it\n          throw new Error(\"Image/PDF export not implemented - requires server-side rendering\");\n        default:\n          throw new Error(`Unsupported export format: ${options.format}`);\n      }\n    } catch (error) {\n      throw new Error(`Export failed: ${(error as Error).message}`);\n    }\n  }\n\n  private exportAsJson(chartData: any, chartType: string): ExportResult {\n    const exportData = {\n      chartType,\n      data: chartData,\n      exportedAt: new Date().toISOString(),\n    };\n\n    return {\n      data: JSON.stringify(exportData, null, 2),\n      filename: `chart_${Date.now()}.json`,\n      contentType: \"application/json\",\n    };\n  }\n\n  validateChartData(data: any[], chartType: string): boolean {\n    if (!Array.isArray(data) || data.length === 0) {\n      return false;\n    }\n\n    const firstItem = data[0];\n    if (!firstItem || typeof firstItem !== \"object\") {\n      return false;\n    }\n\n    const keys = Object.keys(firstItem);\n\n    switch (chartType) {\n      case \"pie\":\n        return keys.length >= 2; // Need at least name and value\n      case \"bar\":\n      case \"line\":\n      case \"area\":\n        return keys.length >= 2; // Need at least x and y axis\n      case \"scatter\":\n        return keys.length >= 2; // Need at least x and y coordinates\n      default:\n        return true;\n    }\n  }\n\n  generateChartSummary(data: any[], chartType: string): string {\n    const dataCount = data.length;\n    \n    switch (chartType) {\n      case \"pie\":\n        return `Pie chart showing distribution across ${dataCount} categories`;\n      case \"bar\":\n        return `Bar chart comparing ${dataCount} data points`;\n      case \"line\":\n        return `Line chart showing trends across ${dataCount} time periods`;\n      case \"area\":\n        return `Area chart displaying ${dataCount} data points over time`;\n      case \"scatter\":\n        return `Scatter plot with ${dataCount} data points showing correlation`;\n      default:\n        return `Chart with ${dataCount} data points`;\n    }\n  }\n\n  suggestOptimalChartType(data: any[]): string {\n    if (!data || data.length === 0) return \"bar\";\n\n    const keys = Object.keys(data[0]);\n    const numericKeys = keys.filter(key => \n      data.every(item => !isNaN(parseFloat(item[key])))\n    );\n\n    // If we have time-based data (dates), suggest line/area\n    const hasTimeData = keys.some(key => \n      data.some(item => !isNaN(Date.parse(item[key])))\n    );\n\n    if (hasTimeData && numericKeys.length > 0) {\n      return \"line\";\n    }\n\n    // If we have categorical data with numeric values, suggest pie or bar\n    if (numericKeys.length === 1 && keys.length === 2) {\n      return data.length <= 10 ? \"pie\" : \"bar\";\n    }\n\n    // If we have two numeric columns, suggest scatter\n    if (numericKeys.length >= 2) {\n      return \"scatter\";\n    }\n\n    // Default to bar chart\n    return \"bar\";\n  }\n}\n\nexport const visualizationService = new VisualizationService();\n","size_bytes":3611},"client/src/components/ChartRenderer.tsx":{"content":"import {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  ScatterChart,\n  Scatter,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell,\n} from \"recharts\";\n\ninterface ChartRendererProps {\n  type: \"bar\" | \"line\" | \"pie\" | \"scatter\" | \"area\";\n  data: any[];\n  config: any;\n}\n\nconst COLORS = [\n  \"hsl(var(--chart-1))\",\n  \"hsl(var(--chart-2))\",\n  \"hsl(var(--chart-3))\",\n  \"hsl(var(--chart-4))\",\n  \"hsl(var(--chart-5))\",\n];\n\nexport default function ChartRenderer({ type, data, config }: ChartRendererProps) {\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg border border-border p-4 h-64 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-secondary to-purple-600 rounded-lg flex items-center justify-center mx-auto mb-3\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n            </svg>\n          </div>\n          <p className=\"text-sm font-medium text-foreground\">No Data Available</p>\n          <p className=\"text-xs text-muted-foreground\">Unable to generate visualization</p>\n        </div>\n      </div>\n    );\n  }\n\n  const renderChart = () => {\n    switch (type) {\n      case \"bar\":\n        return (\n          <BarChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={config.xAxisDataKey || Object.keys(data[0])[0]} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar \n              dataKey={config.yAxisDataKey || Object.keys(data[0])[1]} \n              fill=\"hsl(var(--chart-1))\"\n            />\n          </BarChart>\n        );\n\n      case \"line\":\n        return (\n          <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={config.xAxisDataKey || Object.keys(data[0])[0]} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line \n              type=\"monotone\" \n              dataKey={config.yAxisDataKey || Object.keys(data[0])[1]} \n              stroke=\"hsl(var(--chart-1))\"\n              strokeWidth={2}\n            />\n          </LineChart>\n        );\n\n      case \"pie\":\n        return (\n          <PieChart margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey={config.dataKey || \"value\"}\n            >\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))}\n            </Pie>\n            <Tooltip />\n          </PieChart>\n        );\n\n      case \"scatter\":\n        return (\n          <ScatterChart data={data} margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n            <CartesianGrid />\n            <XAxis type=\"number\" dataKey={config.xAxisDataKey || \"x\"} name=\"X\" />\n            <YAxis type=\"number\" dataKey={config.yAxisDataKey || \"y\"} name=\"Y\" />\n            <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n            <Scatter name=\"Data Points\" data={data} fill=\"hsl(var(--chart-1))\" />\n          </ScatterChart>\n        );\n\n      case \"area\":\n        return (\n          <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={config.xAxisDataKey || Object.keys(data[0])[0]} />\n            <YAxis />\n            <Tooltip />\n            <Area \n              type=\"monotone\" \n              dataKey={config.yAxisDataKey || Object.keys(data[0])[1]} \n              stroke=\"hsl(var(--chart-1))\"\n              fill=\"hsl(var(--chart-1))\"\n              fillOpacity={0.3}\n            />\n          </AreaChart>\n        );\n\n      default:\n        return (\n          <div className=\"flex items-center justify-center h-full\">\n            <p className=\"text-muted-foreground\">Unsupported chart type: {type}</p>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg border border-border p-4\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        {renderChart()}\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":4842},"client/src/components/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useChat } from \"@/hooks/useChat\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ChartRenderer from \"./ChartRenderer\";\nimport { Paperclip, Send, Lightbulb } from \"lucide-react\";\n\ninterface Message {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  metadata?: any;\n  createdAt: string;\n}\n\ninterface QueryResponse {\n  result: {\n    insights: {\n      summary: string;\n      keyInsights: string[];\n      recommendations: string[];\n    };\n    visualization?: {\n      type: string;\n      data: any;\n      config: any;\n    };\n    queryId: string;\n  };\n}\n\nconst suggestions = [\n  \"💡 Monthly revenue trends\",\n  \"📊 Customer segments\", \n  \"📈 Growth metrics\",\n];\n\nexport default function ChatInterface() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { currentConversation } = useChat();\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/conversations\", currentConversation?.id, \"messages\"],\n    enabled: !!currentConversation?.id,\n  });\n\n  const { data: dataSources = [] } = useQuery({\n    queryKey: [\"/api/data-sources\"],\n  });\n\n  const sendQueryMutation = useMutation({\n    mutationFn: async (data: { query: string; conversationId: string; dataSourceId?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/chat/query\", data);\n      return response.json() as Promise<QueryResponse>;\n    },\n    onSuccess: (data) => {\n      // Invalidate messages to refetch updated conversation\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/conversations\", currentConversation?.id, \"messages\"],\n      });\n      setIsProcessing(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Query Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!inputValue.trim() || !currentConversation || isProcessing) return;\n\n    const activeDataSource = dataSources.find((ds: any) => ds.isActive);\n    \n    setIsProcessing(true);\n    sendQueryMutation.mutate({\n      query: inputValue.trim(),\n      conversationId: currentConversation.id,\n      dataSourceId: activeDataSource?.id,\n    });\n    \n    setInputValue(\"\");\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInputValue(suggestion.replace(/^[^\\s]+ /, \"\")); // Remove emoji prefix\n    textareaRef.current?.focus();\n  };\n\n  const autoResize = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = \"auto\";\n      textareaRef.current.style.height = textareaRef.current.scrollHeight + \"px\";\n    }\n  };\n\n  useEffect(() => {\n    autoResize();\n  }, [inputValue]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const renderMessage = (message: Message) => {\n    if (message.role === \"user\") {\n      return (\n        <div key={message.id} className=\"flex items-start space-x-3 justify-end\">\n          <div className=\"flex-1 min-w-0 text-right\">\n            <div className=\"bg-primary text-primary-foreground rounded-lg px-4 py-3 inline-block max-w-md\">\n              <p className=\"text-sm\">{message.content}</p>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {new Date(message.createdAt).toLocaleTimeString()}\n            </p>\n          </div>\n          <div className=\"flex-shrink-0\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-primary-foreground\">U</span>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    // Assistant message\n    let parsedContent;\n    try {\n      parsedContent = JSON.parse(message.content);\n    } catch {\n      parsedContent = { summary: message.content };\n    }\n\n    return (\n      <div key={message.id} className=\"flex items-start space-x-3\">\n        <div className=\"flex-shrink-0\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-purple-600 rounded-full flex items-center justify-center\">\n            <svg className=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n            </svg>\n          </div>\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"bg-muted rounded-lg px-4 py-3\">\n            <p className=\"text-sm text-foreground mb-4\">{parsedContent.summary}</p>\n            \n            {/* Render chart if available */}\n            {parsedContent.visualization && (\n              <div className=\"mb-4\">\n                <ChartRenderer \n                  type={parsedContent.visualization.type}\n                  data={parsedContent.visualization.data}\n                  config={parsedContent.visualization.config}\n                />\n              </div>\n            )}\n            \n            {/* Key insights */}\n            {parsedContent.keyInsights && (\n              <div className=\"space-y-2 text-sm text-foreground mb-4\">\n                <p><strong>Key Insights:</strong></p>\n                <ul className=\"list-disc list-inside space-y-1 text-xs text-muted-foreground\">\n                  {parsedContent.keyInsights.map((insight: string, index: number) => (\n                    <li key={index}>{insight}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Recommendations */}\n            {parsedContent.recommendations && (\n              <div className=\"space-y-2 text-sm text-foreground mb-4\">\n                <p><strong>Recommendations:</strong></p>\n                <ul className=\"list-disc list-inside space-y-1 text-xs text-muted-foreground\">\n                  {parsedContent.recommendations.map((rec: string, index: number) => (\n                    <li key={index}>{rec}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Action buttons */}\n            <div className=\"flex items-center space-x-2 pt-3 border-t border-border\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"text-xs\"\n                data-testid=\"button-export-chart\"\n              >\n                <svg className=\"h-3 w-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\n                </svg>\n                Export\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"text-xs\"\n                data-testid=\"button-share-insight\"\n              >\n                <svg className=\"h-3 w-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z\" />\n                </svg>\n                Share\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"text-xs\"\n                data-testid=\"button-drill-down\"\n              >\n                <svg className=\"h-3 w-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n                Drill Down\n              </Button>\n            </div>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {new Date(message.createdAt).toLocaleTimeString()}\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  if (!currentConversation) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-purple-600 rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n            </svg>\n          </div>\n          <p className=\"text-lg font-medium text-gray-900\">No conversation selected</p>\n          <p className=\"text-gray-600\">Start a new chat to begin your analytics journey</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col bg-white\">\n      {/* Messages Area */}\n      <div className=\"flex-1 overflow-y-auto px-4 py-6 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          \n          {/* Welcome Message */}\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-purple-600 rounded-full flex items-center justify-center\">\n                <svg className=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n                </svg>\n              </div>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"bg-muted rounded-lg px-4 py-3\">\n                <p className=\"text-sm text-foreground\">👋 Hi! I'm GrowthMate AI, your analytics assistant. Ask me anything about your business data, and I'll help you create visualizations and insights.</p>\n                <p className=\"text-xs text-muted-foreground mt-2\">Try: \"Show me my revenue trends for the last 6 months\" or \"What's my customer acquisition cost?\"</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Messages */}\n          {messagesLoading ? (\n            <div className=\"space-y-6\">\n              {[...Array(2)].map((_, i) => (\n                <div key={i} className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full animate-pulse\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"bg-gray-200 rounded-lg px-4 py-3 animate-pulse\">\n                      <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            messages.map(renderMessage)\n          )}\n\n          {/* Processing Indicator */}\n          {isProcessing && (\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-purple-600 rounded-full flex items-center justify-center\">\n                  <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></div>\n                </div>\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"bg-muted rounded-lg px-4 py-3\">\n                  <div className=\"flex items-center space-x-1\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse\"></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground ml-2\">Analyzing your data...</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n\n      {/* Input Area */}\n      <div className=\"border-t border-border px-4 py-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-end space-x-3\">\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"relative\">\n                <Textarea\n                  ref={textareaRef}\n                  rows={1}\n                  placeholder=\"Ask me about your business data...\"\n                  className=\"resize-none pr-12\"\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                  disabled={isProcessing}\n                  data-testid=\"textarea-chat-input\"\n                />\n                <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-6 w-6\"\n                    title=\"Attach data file\"\n                    data-testid=\"button-attach-file\"\n                  >\n                    <Paperclip className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Quick Suggestions */}\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {suggestions.map((suggestion, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"text-xs h-6\"\n                    onClick={() => handleSuggestionClick(suggestion)}\n                    data-testid={`suggestion-${index}`}\n                  >\n                    {suggestion}\n                  </Button>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"flex-shrink-0\">\n              <Button\n                onClick={handleSendMessage}\n                disabled={!inputValue.trim() || isProcessing}\n                data-testid=\"button-send-message\"\n              >\n                <Send className=\"h-4 w-4\" />\n                <span className=\"sr-only\">Send message</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15223},"client/src/components/DataSourceManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Database, Settings, Trash2 } from \"lucide-react\";\n\nconst dataSourceSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  type: z.enum([\"google_sheets\", \"postgresql\", \"csv\", \"api\"]),\n  config: z.record(z.any()),\n});\n\ntype DataSourceForm = z.infer<typeof dataSourceSchema>;\n\nexport default function DataSourceManager() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedType, setSelectedType] = useState<string>(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: dataSources = [], isLoading } = useQuery({\n    queryKey: [\"/api/data-sources\"],\n  });\n\n  const { data: recentInsights = [] } = useQuery({\n    queryKey: [\"/api/insights\"],\n    queryFn: () => Promise.resolve([\n      {\n        id: \"1\",\n        title: \"Revenue Growth\",\n        description: \"Q1 revenue increased by 23% compared to Q4\",\n        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n      },\n      {\n        id: \"2\", \n        title: \"Customer Retention\",\n        description: \"Monthly retention rate improved to 94%\",\n        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n      },\n      {\n        id: \"3\",\n        title: \"Product Performance\", \n        description: \"SaaS products leading category growth\",\n        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n      },\n    ]),\n  });\n\n  const form = useForm<DataSourceForm>({\n    resolver: zodResolver(dataSourceSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"google_sheets\",\n      config: {},\n    },\n  });\n\n  const createDataSourceMutation = useMutation({\n    mutationFn: async (data: DataSourceForm) => {\n      const response = await apiRequest(\"POST\", \"/api/data-sources\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/data-sources\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Data source created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDataSourceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/data-sources/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/data-sources\"] });\n      toast({\n        title: \"Success\",\n        description: \"Data source deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleDataSourceMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: string; isActive: boolean }) => {\n      const response = await apiRequest(\"PUT\", `/api/data-sources/${id}`, {\n        isActive: !isActive,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/data-sources\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: DataSourceForm) => {\n    let config = {};\n    \n    if (data.type === \"google_sheets\") {\n      const spreadsheetId = (form.getValues(\"config\") as any)?.spreadsheetId;\n      const range = (form.getValues(\"config\") as any)?.range;\n      \n      if (!spreadsheetId) {\n        toast({\n          title: \"Error\",\n          description: \"Spreadsheet ID is required for Google Sheets\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      config = {\n        spreadsheetId,\n        range: range || \"A:Z\",\n      };\n    }\n\n    createDataSourceMutation.mutate({\n      ...data,\n      config,\n    });\n  };\n\n  const handleTypeChange = (type: string) => {\n    setSelectedType(type);\n    form.setValue(\"type\", type as any);\n    form.setValue(\"config\", {});\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    \n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n    \n    if (hours < 1) return \"Just now\";\n    if (hours < 24) return `${hours} hour${hours !== 1 ? 's' : ''} ago`;\n    return `${days} day${days !== 1 ? 's' : ''} ago`;\n  };\n\n  return (\n    <div className=\"px-4 py-6\">\n      <h2 className=\"text-sm font-semibold text-gray-900 mb-4\">Data Sources</h2>\n      \n      {/* Connected Sources */}\n      <div className=\"space-y-3 mb-6\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(2)].map((_, i) => (\n              <div key={i} className=\"bg-white rounded-lg border border-gray-200 p-3 animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        ) : dataSources.length > 0 ? (\n          dataSources.map((source: any) => (\n            <div key={source.id} className=\"bg-white rounded-lg border border-gray-200 p-3\" data-testid={`data-source-${source.id}`}>\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center\">\n                  <div className={`w-6 h-6 rounded flex items-center justify-center ${\n                    source.isActive ? 'bg-green-100' : 'bg-gray-100'\n                  }`}>\n                    <div className={`w-2 h-2 rounded-full ${\n                      source.isActive ? 'bg-green-500' : 'bg-gray-400'\n                    }`}></div>\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-900 ml-2\">{source.name}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant={source.isActive ? \"default\" : \"secondary\"}>\n                    {source.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => toggleDataSourceMutation.mutate({ id: source.id, isActive: source.isActive })}\n                    data-testid={`button-toggle-${source.id}`}\n                  >\n                    <Settings className=\"h-3 w-3\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => deleteDataSourceMutation.mutate(source.id)}\n                    data-testid={`button-delete-${source.id}`}\n                  >\n                    <Trash2 className=\"h-3 w-3 text-red-500\" />\n                  </Button>\n                </div>\n              </div>\n              <p className=\"text-xs text-gray-500\">{source.type.replace('_', ' ').toUpperCase()}</p>\n              <div className=\"flex items-center justify-between mt-2\">\n                <span className=\"text-xs text-gray-400\">\n                  Last sync: {source.lastSyncAt ? formatTimeAgo(source.lastSyncAt) : 'Never'}\n                </span>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center py-6\">\n            <Database className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No data sources</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">Connect your first data source to get started</p>\n          </div>\n        )}\n      </div>\n\n      {/* Add New Source */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogTrigger asChild>\n          <Button \n            variant=\"outline\" \n            className=\"w-full border-dashed\"\n            data-testid=\"button-add-data-source\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Connect Data Source\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Add Data Source</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                {...form.register(\"name\")}\n                placeholder=\"My Data Source\"\n                data-testid=\"input-source-name\"\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-sm text-red-600 mt-1\">\n                  {form.formState.errors.name.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"type\">Type</Label>\n              <Select onValueChange={handleTypeChange} defaultValue=\"google_sheets\">\n                <SelectTrigger data-testid=\"select-source-type\">\n                  <SelectValue placeholder=\"Select data source type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"google_sheets\">Google Sheets</SelectItem>\n                  <SelectItem value=\"postgresql\">PostgreSQL</SelectItem>\n                  <SelectItem value=\"csv\">CSV File</SelectItem>\n                  <SelectItem value=\"api\">API</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {selectedType === \"google_sheets\" && (\n              <>\n                <div>\n                  <Label htmlFor=\"spreadsheetId\">Spreadsheet ID</Label>\n                  <Input\n                    id=\"spreadsheetId\"\n                    placeholder=\"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\"\n                    onChange={(e) => form.setValue(\"config\", { \n                      ...form.getValues(\"config\"), \n                      spreadsheetId: e.target.value \n                    })}\n                    data-testid=\"input-spreadsheet-id\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Copy from the Google Sheets URL\n                  </p>\n                </div>\n                <div>\n                  <Label htmlFor=\"range\">Range (optional)</Label>\n                  <Input\n                    id=\"range\"\n                    placeholder=\"A:Z\"\n                    onChange={(e) => form.setValue(\"config\", { \n                      ...form.getValues(\"config\"), \n                      range: e.target.value \n                    })}\n                    data-testid=\"input-range\"\n                  />\n                </div>\n              </>\n            )}\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsDialogOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={createDataSourceMutation.isPending}\n                data-testid=\"button-create-source\"\n              >\n                {createDataSourceMutation.isPending ? \"Creating...\" : \"Create\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Recent Insights */}\n      <div className=\"mt-8\">\n        <h3 className=\"text-sm font-semibold text-gray-900 mb-4\">Recent Insights</h3>\n        <div className=\"space-y-3\">\n          {recentInsights.map((insight: any) => (\n            <div key={insight.id} className=\"bg-white rounded-lg border border-gray-200 p-3\" data-testid={`insight-${insight.id}`}>\n              <h4 className=\"text-sm font-medium text-gray-900 mb-1\">{insight.title}</h4>\n              <p className=\"text-xs text-gray-600 mb-2\">{insight.description}</p>\n              <span className=\"text-xs text-gray-400\">{formatTimeAgo(insight.createdAt)}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Usage Stats */}\n      <div className=\"mt-8\">\n        <h3 className=\"text-sm font-semibold text-gray-900 mb-4\">Usage This Month</h3>\n        <div className=\"bg-white rounded-lg border border-gray-200 p-3\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-xs text-gray-600\">Queries</span>\n              <span className=\"text-xs font-medium\" data-testid=\"text-usage-queries\">248 / 500</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div className=\"bg-primary h-2 rounded-full\" style={{ width: \"50%\" }}></div>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-xs text-gray-600\">Data Processed</span>\n              <span className=\"text-xs font-medium\" data-testid=\"text-usage-data\">1.2 GB / 5 GB</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div className=\"bg-secondary h-2 rounded-full\" style={{ width: \"24%\" }}></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14241},"client/src/components/Sidebar.tsx":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useChat } from \"@/hooks/useChat\";\nimport { \n  MessageSquare, \n  BarChart3, \n  Settings, \n  History,\n  Plus,\n  LogOut\n} from \"lucide-react\";\n\nconst templates = [\n  { id: \"revenue\", name: \"Revenue Analysis\", icon: \"📊\" },\n  { id: \"customers\", name: \"Customer Segmentation\", icon: \"👥\" },\n  { id: \"growth\", name: \"Growth Metrics\", icon: \"📈\" },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n  const { createNewConversation } = useChat();\n  const queryClient = useQueryClient();\n\n  const { data: conversations = [], isLoading } = useQuery({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  const handleTemplateClick = (template: any) => {\n    const templateQuery = `Show me ${template.name.toLowerCase()} for my business`;\n    createNewConversation(template.name, templateQuery);\n  };\n\n  const handleLogout = () => {\n    logout();\n    queryClient.clear();\n  };\n\n  return (\n    <aside className=\"hidden lg:flex lg:w-64 lg:flex-col bg-white border-r border-gray-200 shadow-sm\">\n      <div className=\"flex-1 flex flex-col pt-6 pb-4 overflow-y-auto\">\n        {/* Logo and Brand */}\n        <div className=\"flex items-center flex-shrink-0 px-6 mb-8\">\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-purple-600 rounded-lg flex items-center justify-center\">\n              <svg className=\"w-5 h-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h1 className=\"text-lg font-semibold text-gray-900\">GrowthMate AI</h1>\n              <p className=\"text-xs text-gray-500\">Analytics Assistant</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 px-4 space-y-2\">\n          <Link href=\"/chat\">\n            <a className={`group flex items-center px-2 py-2 text-sm font-medium rounded-lg transition-colors ${\n              location.startsWith('/chat') \n                ? 'bg-primary/10 border-r-2 border-primary text-primary' \n                : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n            }`}\n            data-testid=\"nav-chat\">\n              <MessageSquare className={`mr-3 h-5 w-5 ${\n                location.startsWith('/chat') ? 'text-primary' : 'text-gray-400 group-hover:text-gray-500'\n              }`} />\n              Chat Analysis\n            </a>\n          </Link>\n          \n          <Link href=\"/\">\n            <a className={`group flex items-center px-2 py-2 text-sm font-medium rounded-lg transition-colors ${\n              location === '/' \n                ? 'bg-primary/10 border-r-2 border-primary text-primary' \n                : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n            }`}\n            data-testid=\"nav-dashboard\">\n              <BarChart3 className={`mr-3 h-5 w-5 ${\n                location === '/' ? 'text-primary' : 'text-gray-400 group-hover:text-gray-500'\n              }`} />\n              Dashboard\n            </a>\n          </Link>\n\n          <button \n            className=\"w-full text-left text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-lg transition-colors\"\n            data-testid=\"nav-data-sources\"\n          >\n            <Settings className=\"text-gray-400 group-hover:text-gray-500 mr-3 h-5 w-5\" />\n            Data Sources\n          </button>\n\n          <button \n            className=\"w-full text-left text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium rounded-lg transition-colors\"\n            data-testid=\"nav-history\"\n          >\n            <History className=\"text-gray-400 group-hover:text-gray-500 mr-3 h-5 w-5\" />\n            History\n          </button>\n        </nav>\n\n        {/* Recent Conversations */}\n        {conversations.length > 0 && (\n          <div className=\"px-4 mt-6\">\n            <h3 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3\">Recent Chats</h3>\n            <div className=\"space-y-1\">\n              {conversations.slice(0, 5).map((conversation: any) => (\n                <Link key={conversation.id} href={`/chat/${conversation.id}`}>\n                  <a className=\"block px-2 py-2 text-sm text-gray-600 hover:bg-gray-50 rounded-lg transition-colors truncate\"\n                     data-testid={`recent-chat-${conversation.id}`}>\n                    {conversation.title}\n                  </a>\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Quick Templates */}\n        <div className=\"px-4 mt-8\">\n          <h3 className=\"text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3\">Quick Templates</h3>\n          <div className=\"space-y-2\">\n            {templates.map((template) => (\n              <button\n                key={template.id}\n                onClick={() => handleTemplateClick(template)}\n                className=\"w-full text-left p-2 text-xs text-gray-600 hover:bg-gray-50 rounded-lg transition-colors border border-gray-200\"\n                data-testid={`template-${template.id}`}\n              >\n                {template.icon} {template.name}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* User Profile */}\n        <div className=\"px-4 mt-8 pt-4 border-t border-gray-200\">\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-white\">\n                {user?.username?.charAt(0).toUpperCase()}\n              </span>\n            </div>\n            <div className=\"ml-3 flex-1\">\n              <p className=\"text-sm font-medium text-gray-700\" data-testid=\"text-username\">\n                {user?.username}\n              </p>\n              <p className=\"text-xs text-gray-500\">Pro Plan</p>\n            </div>\n            <button \n              onClick={handleLogout}\n              className=\"text-gray-400 hover:text-gray-500\"\n              title=\"Sign Out\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":6733},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  loading: boolean;\n}\n\nexport function useAuth() {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    loading: true,\n  });\n  const queryClient = useQueryClient();\n\n  // Check if user is authenticated\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"accessToken\");\n      if (!token) return null;\n\n      try {\n        const response = await fetch(\"/api/auth/me\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) {\n          // Token is invalid, try to refresh\n          return await refreshToken();\n        }\n\n        return response.json();\n      } catch (error) {\n        // Try to refresh token\n        return await refreshToken();\n      }\n    },\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const refreshToken = async () => {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    if (!refreshToken) {\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      return null;\n    }\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/refresh\", {\n        refreshToken,\n      });\n      const data = await response.json();\n\n      localStorage.setItem(\"accessToken\", data.accessToken);\n      localStorage.setItem(\"refreshToken\", data.refreshToken);\n\n      // Retry getting user info with new token\n      const userResponse = await fetch(\"/api/auth/me\", {\n        headers: {\n          Authorization: `Bearer ${data.accessToken}`,\n        },\n      });\n\n      if (userResponse.ok) {\n        return userResponse.json();\n      }\n\n      throw new Error(\"Failed to get user info\");\n    } catch (error) {\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      return null;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    queryClient.clear();\n    setAuthState({ user: null, loading: false });\n  };\n\n  useEffect(() => {\n    setAuthState({\n      user,\n      loading: isLoading,\n    });\n  }, [user, isLoading]);\n\n  return {\n    user: authState.user,\n    loading: authState.loading,\n    logout,\n  };\n}\n","size_bytes":2591},"client/src/hooks/useChat.ts":{"content":"import { useState, useCallback } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Conversation {\n  id: string;\n  title: string;\n  userId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport function useChat() {\n  const [currentConversation, setCurrentConversationState] = useState<Conversation | null>(null);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: conversations = [] } = useQuery({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  const createConversationMutation = useMutation({\n    mutationFn: async (title: string) => {\n      const response = await apiRequest(\"POST\", \"/api/conversations\", { title });\n      return response.json();\n    },\n    onSuccess: (conversation) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setCurrentConversationState(conversation);\n      setLocation(`/chat/${conversation.id}`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create conversation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateConversationMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Conversation> }) => {\n      const response = await apiRequest(\"PUT\", `/api/conversations/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    },\n  });\n\n  const deleteConversationMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/conversations/${id}`);\n      return response.json();\n    },\n    onSuccess: (_, deletedId) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      if (currentConversation && currentConversation.id === deletedId) {\n        setCurrentConversationState(null);\n        setLocation(\"/chat\");\n      }\n    },\n  });\n\n  const setCurrentConversation = useCallback((conversationId: string) => {\n    const conversation = conversations.find((c: Conversation) => c.id === conversationId);\n    if (conversation) {\n      setCurrentConversationState(conversation);\n    }\n  }, [conversations]);\n\n  const createNewConversation = useCallback((title: string, initialQuery?: string) => {\n    createConversationMutation.mutate(title);\n    \n    // If there's an initial query, we'll need to send it after the conversation is created\n    // This could be enhanced to queue the initial message\n    if (initialQuery) {\n      // Store initial query in localStorage temporarily\n      localStorage.setItem(\"pendingQuery\", initialQuery);\n    }\n  }, [createConversationMutation]);\n\n  const updateConversationTitle = useCallback((id: string, title: string) => {\n    updateConversationMutation.mutate({ id, updates: { title } });\n  }, [updateConversationMutation]);\n\n  const deleteConversation = useCallback((id: string) => {\n    deleteConversationMutation.mutate(id);\n  }, [deleteConversationMutation]);\n\n  return {\n    conversations,\n    currentConversation,\n    setCurrentConversation,\n    createNewConversation,\n    updateConversationTitle,\n    deleteConversation,\n    isCreating: createConversationMutation.isPending,\n    isUpdating: updateConversationMutation.isPending,\n    isDeleting: deleteConversationMutation.isPending,\n  };\n}\n","size_bytes":3571},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"accessToken\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"accessToken\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1773},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useEffect } from \"react\";\nimport Sidebar from \"@/components/Sidebar\";\nimport ChatInterface from \"@/components/ChatInterface\";\nimport DataSourceManager from \"@/components/DataSourceManager\";\nimport { useChat } from \"@/hooks/useChat\";\n\nexport default function ChatPage() {\n  const { conversationId } = useParams<{ conversationId: string }>();\n  const { currentConversation, setCurrentConversation, createNewConversation } = useChat();\n\n  useEffect(() => {\n    if (conversationId && conversationId !== currentConversation?.id) {\n      setCurrentConversation(conversationId);\n    } else if (!conversationId && !currentConversation) {\n      createNewConversation(\"New Analytics Chat\");\n    }\n  }, [conversationId, currentConversation, setCurrentConversation, createNewConversation]);\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-4 py-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <button \n                type=\"button\" \n                className=\"lg:hidden -ml-2 mr-2 h-12 w-12 inline-flex items-center justify-center rounded-md text-gray-500 hover:text-gray-900 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary\"\n                data-testid=\"button-mobile-menu\"\n              >\n                <svg className=\"h-6 w-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\n                </svg>\n              </button>\n              <h1 className=\"text-lg font-semibold text-gray-900\">\n                {currentConversation?.title || \"Analytics Chat\"}\n              </h1>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <button \n                className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors\"\n                data-testid=\"button-export\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\n                </svg>\n                Export\n              </button>\n              <button \n                className=\"inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-lg text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors\"\n                onClick={() => createNewConversation(\"New Analytics Chat\")}\n                data-testid=\"button-new-chat\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 4v16m8-8H4\" />\n                </svg>\n                New Chat\n              </button>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 flex overflow-hidden\">\n          {/* Chat Interface */}\n          <div className=\"flex-1 flex flex-col\">\n            <ChatInterface />\n          </div>\n\n          {/* Data Sources Panel */}\n          <div className=\"hidden xl:block w-80 bg-gray-50 border-l border-gray-200\">\n            <DataSourceManager />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3899},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { BarChart3, MessageSquare, Database, Clock } from \"lucide-react\";\n\nexport default function DashboardPage() {\n  const { user } = useAuth();\n\n  const { data: conversations = [], isLoading: conversationsLoading } = useQuery({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  const { data: dataSources = [], isLoading: dataSourcesLoading } = useQuery({\n    queryKey: [\"/api/data-sources\"],\n  });\n\n  const recentConversations = conversations.slice(0, 5);\n  const activeDataSources = dataSources.filter((ds: any) => ds.isActive);\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-4 py-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\n              <p className=\"text-gray-600\">Welcome back, {user?.username}</p>\n            </div>\n            <Link href=\"/chat\">\n              <Button data-testid=\"button-new-chat\">\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                New Chat\n              </Button>\n            </Link>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto px-4 py-6 sm:px-6 lg:px-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            \n            {/* Stats Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Conversations</CardTitle>\n                  <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-total-conversations\">\n                    {conversationsLoading ? \"-\" : conversations.length}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Analytics discussions</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Data Sources</CardTitle>\n                  <Database className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-data-sources\">\n                    {dataSourcesLoading ? \"-\" : activeDataSources.length}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Connected sources</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Charts Generated</CardTitle>\n                  <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-charts-generated\">-</div>\n                  <p className=\"text-xs text-muted-foreground\">This month</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Recent Activity</CardTitle>\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-recent-activity\">\n                    {recentConversations.length > 0 ? \"Active\" : \"None\"}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Last 24 hours</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Conversations */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Conversations</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {conversationsLoading ? (\n                    <div className=\"space-y-3\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : recentConversations.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {recentConversations.map((conversation: any) => (\n                        <Link key={conversation.id} href={`/chat/${conversation.id}`}>\n                          <div className=\"p-3 hover:bg-gray-50 rounded-lg cursor-pointer transition-colors\" data-testid={`conversation-${conversation.id}`}>\n                            <h3 className=\"font-medium text-gray-900\">{conversation.title}</h3>\n                            <p className=\"text-sm text-gray-500\">\n                              {new Date(conversation.updatedAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </Link>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-6\">\n                      <MessageSquare className=\"mx-auto h-12 w-12 text-gray-400\" />\n                      <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No conversations yet</h3>\n                      <p className=\"mt-1 text-sm text-gray-500\">Start your first analytics conversation</p>\n                      <div className=\"mt-6\">\n                        <Link href=\"/chat\">\n                          <Button data-testid=\"button-start-chat\">Start Chatting</Button>\n                        </Link>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Data Sources */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Data Sources</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {dataSourcesLoading ? (\n                    <div className=\"space-y-3\">\n                      {[...Array(2)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : dataSources.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {dataSources.map((source: any) => (\n                        <div key={source.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\" data-testid={`data-source-${source.id}`}>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className={`w-3 h-3 rounded-full ${source.isActive ? 'bg-green-500' : 'bg-gray-400'}`}></div>\n                            <div>\n                              <h3 className=\"font-medium text-gray-900\">{source.name}</h3>\n                              <p className=\"text-sm text-gray-500\">{source.type}</p>\n                            </div>\n                          </div>\n                          <Badge variant={source.isActive ? \"default\" : \"secondary\"}>\n                            {source.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-6\">\n                      <Database className=\"mx-auto h-12 w-12 text-gray-400\" />\n                      <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No data sources</h3>\n                      <p className=\"mt-1 text-sm text-gray-500\">Connect your first data source to get started</p>\n                      <div className=\"mt-6\">\n                        <Button variant=\"outline\" data-testid=\"button-connect-source\">Connect Data Source</Button>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9255},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(2, \"Username must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function LoginPage() {\n  const [activeTab, setActiveTab] = useState<\"login\" | \"register\">(\"login\");\n  const { toast } = useToast();\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"accessToken\", data.accessToken);\n      localStorage.setItem(\"refreshToken\", data.refreshToken);\n      window.location.reload();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"accessToken\", data.accessToken);\n      localStorage.setItem(\"refreshToken\", data.refreshToken);\n      window.location.reload();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLogin = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-purple-600 rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n            </svg>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">GrowthMate AI</h1>\n          <p className=\"text-gray-600\">Your Analytics Assistant</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Welcome</CardTitle>\n            <CardDescription>\n              Sign in to your account or create a new one to get started\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as \"login\" | \"register\")}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      {...loginForm.register(\"email\")}\n                      data-testid=\"input-email\"\n                    />\n                    {loginForm.formState.errors.email && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {loginForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      {...loginForm.register(\"password\")}\n                      data-testid=\"input-password\"\n                    />\n                    {loginForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-login\"\n                  >\n                    {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      {...registerForm.register(\"username\")}\n                      data-testid=\"input-username\"\n                    />\n                    {registerForm.formState.errors.username && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {registerForm.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"register-email\">Email</Label>\n                    <Input\n                      id=\"register-email\"\n                      type=\"email\"\n                      {...registerForm.register(\"email\")}\n                      data-testid=\"input-register-email\"\n                    />\n                    {registerForm.formState.errors.email && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {registerForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"register-password\">Password</Label>\n                    <Input\n                      id=\"register-password\"\n                      type=\"password\"\n                      {...registerForm.register(\"password\")}\n                      data-testid=\"input-register-password\"\n                    />\n                    {registerForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {registerForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={registerMutation.isPending}\n                    data-testid=\"button-register\"\n                  >\n                    {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8340},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/services/api.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterRequest {\n  username: string;\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  user: {\n    id: string;\n    username: string;\n    email: string;\n  };\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface QueryRequest {\n  query: string;\n  conversationId: string;\n  dataSourceId?: string;\n}\n\nexport interface QueryResponse {\n  result: {\n    insights: {\n      summary: string;\n      keyInsights: string[];\n      recommendations: string[];\n    };\n    visualization?: {\n      type: \"bar\" | \"line\" | \"pie\" | \"scatter\" | \"area\";\n      data: any;\n      config: any;\n    };\n    queryId: string;\n  };\n}\n\nexport interface DataSourceRequest {\n  name: string;\n  type: \"google_sheets\" | \"postgresql\" | \"csv\" | \"api\";\n  config: Record<string, any>;\n}\n\nexport interface ExportRequest {\n  chartData: any;\n  chartType: string;\n  format: \"png\" | \"pdf\" | \"svg\" | \"json\";\n}\n\n// Auth API\nexport const authAPI = {\n  login: async (data: LoginRequest): Promise<AuthResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n    return response.json();\n  },\n\n  register: async (data: RegisterRequest): Promise<AuthResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n    return response.json();\n  },\n\n  refresh: async (refreshToken: string): Promise<{ accessToken: string; refreshToken: string }> => {\n    const response = await apiRequest(\"POST\", \"/api/auth/refresh\", { refreshToken });\n    return response.json();\n  },\n\n  me: async (): Promise<{ id: string; username: string; email: string }> => {\n    const token = localStorage.getItem(\"accessToken\");\n    const response = await fetch(\"/api/auth/me\", {\n      headers: token ? { Authorization: `Bearer ${token}` } : {},\n    });\n    \n    if (!response.ok) {\n      throw new Error(\"Not authenticated\");\n    }\n    \n    return response.json();\n  },\n};\n\n// Chat API\nexport const chatAPI = {\n  sendQuery: async (data: QueryRequest): Promise<QueryResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/chat/query\", data);\n    return response.json();\n  },\n\n  getConversations: async () => {\n    const response = await apiRequest(\"GET\", \"/api/conversations\");\n    return response.json();\n  },\n\n  createConversation: async (title: string) => {\n    const response = await apiRequest(\"POST\", \"/api/conversations\", { title });\n    return response.json();\n  },\n\n  getMessages: async (conversationId: string) => {\n    const response = await apiRequest(\"GET\", `/api/conversations/${conversationId}/messages`);\n    return response.json();\n  },\n\n  updateConversation: async (id: string, updates: any) => {\n    const response = await apiRequest(\"PUT\", `/api/conversations/${id}`, updates);\n    return response.json();\n  },\n\n  deleteConversation: async (id: string) => {\n    const response = await apiRequest(\"DELETE\", `/api/conversations/${id}`);\n    return response.json();\n  },\n};\n\n// Data Sources API\nexport const dataSourcesAPI = {\n  getAll: async () => {\n    const response = await apiRequest(\"GET\", \"/api/data-sources\");\n    return response.json();\n  },\n\n  create: async (data: DataSourceRequest) => {\n    const response = await apiRequest(\"POST\", \"/api/data-sources\", data);\n    return response.json();\n  },\n\n  update: async (id: string, updates: Partial<DataSourceRequest>) => {\n    const response = await apiRequest(\"PUT\", `/api/data-sources/${id}`, updates);\n    return response.json();\n  },\n\n  delete: async (id: string) => {\n    const response = await apiRequest(\"DELETE\", `/api/data-sources/${id}`);\n    return response.json();\n  },\n};\n\n// Export API\nexport const exportAPI = {\n  exportChart: async (data: ExportRequest) => {\n    const response = await apiRequest(\"POST\", \"/api/export/chart\", data);\n    return response;\n  },\n};\n\n// Templates API\nexport const templatesAPI = {\n  getAll: async () => {\n    const response = await apiRequest(\"GET\", \"/api/templates\");\n    return response.json();\n  },\n\n  getByCategory: async (category: string) => {\n    const response = await apiRequest(\"GET\", `/api/templates?category=${category}`);\n    return response.json();\n  },\n};\n\n// Health Check\nexport const healthAPI = {\n  check: async () => {\n    const response = await apiRequest(\"GET\", \"/api/health\");\n    return response.json();\n  },\n};\n","size_bytes":4411},"client/src/types/index.ts":{"content":"// User types\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  createdAt: string;\n}\n\nexport interface InsertUser {\n  username: string;\n  email: string;\n  password: string;\n}\n\n// Conversation types\nexport interface Conversation {\n  id: string;\n  userId: string;\n  title: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface InsertConversation {\n  userId: string;\n  title: string;\n}\n\n// Message types\nexport interface Message {\n  id: string;\n  conversationId: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  metadata?: Record<string, any>;\n  createdAt: string;\n}\n\nexport interface InsertMessage {\n  conversationId: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  metadata?: Record<string, any>;\n}\n\n// Data Source types\nexport interface DataSource {\n  id: string;\n  userId: string;\n  name: string;\n  type: \"google_sheets\" | \"postgresql\" | \"csv\" | \"api\";\n  config: Record<string, any>;\n  isActive: boolean;\n  lastSyncAt?: string;\n  createdAt: string;\n}\n\nexport interface InsertDataSource {\n  userId: string;\n  name: string;\n  type: \"google_sheets\" | \"postgresql\" | \"csv\" | \"api\";\n  config: Record<string, any>;\n  isActive?: boolean;\n}\n\n// Query types\nexport interface Query {\n  id: string;\n  userId: string;\n  conversationId?: string;\n  originalQuery: string;\n  processedQuery?: string;\n  queryType?: string;\n  dataSourceId?: string;\n  results?: any;\n  createdAt: string;\n}\n\nexport interface InsertQuery {\n  userId: string;\n  conversationId?: string;\n  originalQuery: string;\n  processedQuery?: string;\n  queryType?: string;\n  dataSourceId?: string;\n  results?: any;\n}\n\n// Visualization types\nexport interface Visualization {\n  id: string;\n  queryId: string;\n  type: \"bar\" | \"line\" | \"pie\" | \"scatter\" | \"area\";\n  config: Record<string, any>;\n  data: any;\n  createdAt: string;\n}\n\nexport interface InsertVisualization {\n  queryId: string;\n  type: \"bar\" | \"line\" | \"pie\" | \"scatter\" | \"area\";\n  config: Record<string, any>;\n  data: any;\n}\n\n// Template types\nexport interface Template {\n  id: string;\n  name: string;\n  description?: string;\n  category: string;\n  prompt: string;\n  isPublic: boolean;\n  createdAt: string;\n}\n\nexport interface InsertTemplate {\n  name: string;\n  description?: string;\n  category: string;\n  prompt: string;\n  isPublic?: boolean;\n}\n\n// API Response types\nexport interface AuthResponse {\n  message: string;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n  };\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface QueryAnalysis {\n  intent: string;\n  entities: string[];\n  queryType: \"metrics\" | \"comparison\" | \"trend\" | \"distribution\" | \"correlation\";\n  timeframe?: string;\n  filters?: Record<string, any>;\n  suggestedVisualization: \"bar\" | \"line\" | \"pie\" | \"scatter\" | \"area\";\n}\n\nexport interface QueryProcessingResult {\n  queryId: string;\n  results: any[];\n  visualization?: {\n    type: \"bar\" | \"line\" | \"pie\" | \"scatter\" | \"area\";\n    data: any;\n    config: any;\n  };\n  insights: {\n    summary: string;\n    keyInsights: string[];\n    recommendations: string[];\n  };\n}\n\nexport interface ChartInsights {\n  summary: string;\n  keyInsights: string[];\n  recommendations: string[];\n}\n\n// Chart configuration types\nexport interface ChartConfig {\n  responsive?: boolean;\n  maintainAspectRatio?: boolean;\n  xAxisDataKey?: string;\n  yAxisDataKey?: string;\n  dataKey?: string;\n  nameKey?: string;\n  [key: string]: any;\n}\n\n// Export types\nexport interface ExportOptions {\n  format: \"png\" | \"pdf\" | \"svg\" | \"json\";\n  width?: number;\n  height?: number;\n  title?: string;\n}\n\nexport interface ExportResult {\n  data: Buffer | string;\n  filename: string;\n  contentType: string;\n}\n\n// Error types\nexport interface APIError {\n  message: string;\n  error?: string;\n  statusCode?: number;\n}\n\n// UI State types\nexport interface ChatState {\n  isProcessing: boolean;\n  inputValue: string;\n  suggestions: string[];\n}\n\nexport interface UIState {\n  sidebarOpen: boolean;\n  mobileMenuOpen: boolean;\n  darkMode: boolean;\n}\n\n// Google Sheets specific types\nexport interface GoogleSheetsConfig {\n  spreadsheetId: string;\n  range?: string;\n  credentials?: any;\n}\n\nexport interface SheetData {\n  headers: string[];\n  rows: any[][];\n  metadata: {\n    spreadsheetId: string;\n    sheetName: string;\n    range: string;\n  };\n}\n\n// Usage statistics types\nexport interface UsageStats {\n  queries: {\n    used: number;\n    limit: number;\n  };\n  dataProcessed: {\n    used: string; // e.g., \"1.2 GB\"\n    limit: string; // e.g., \"5 GB\"\n  };\n}\n\n// Recent insights type\nexport interface RecentInsight {\n  id: string;\n  title: string;\n  description: string;\n  createdAt: string;\n}\n","size_bytes":4652},"client/src/utils/chartUtils.ts":{"content":"import type { ChartConfig } from \"@/types\";\n\n// Color palette for charts\nexport const CHART_COLORS = [\n  \"hsl(var(--chart-1))\",\n  \"hsl(var(--chart-2))\",\n  \"hsl(var(--chart-3))\",\n  \"hsl(var(--chart-4))\",\n  \"hsl(var(--chart-5))\",\n];\n\n// Chart type validation\nexport function validateChartData(data: any[], chartType: string): boolean {\n  if (!Array.isArray(data) || data.length === 0) {\n    return false;\n  }\n\n  const firstItem = data[0];\n  if (!firstItem || typeof firstItem !== \"object\") {\n    return false;\n  }\n\n  const keys = Object.keys(firstItem);\n\n  switch (chartType) {\n    case \"pie\":\n      return keys.length >= 2; // Need at least name and value\n    case \"bar\":\n    case \"line\":\n    case \"area\":\n      return keys.length >= 2; // Need at least x and y axis\n    case \"scatter\":\n      return keys.length >= 2; // Need at least x and y coordinates\n    default:\n      return true;\n  }\n}\n\n// Generate chart summary\nexport function generateChartSummary(data: any[], chartType: string): string {\n  const dataCount = data.length;\n  \n  switch (chartType) {\n    case \"pie\":\n      return `Pie chart showing distribution across ${dataCount} categories`;\n    case \"bar\":\n      return `Bar chart comparing ${dataCount} data points`;\n    case \"line\":\n      return `Line chart showing trends across ${dataCount} time periods`;\n    case \"area\":\n      return `Area chart displaying ${dataCount} data points over time`;\n    case \"scatter\":\n      return `Scatter plot with ${dataCount} data points showing correlation`;\n    default:\n      return `Chart with ${dataCount} data points`;\n  }\n}\n\n// Suggest optimal chart type based on data\nexport function suggestOptimalChartType(data: any[]): string {\n  if (!data || data.length === 0) return \"bar\";\n\n  const keys = Object.keys(data[0]);\n  const numericKeys = keys.filter(key => \n    data.every(item => !isNaN(parseFloat(item[key])))\n  );\n\n  // If we have time-based data (dates), suggest line/area\n  const hasTimeData = keys.some(key => \n    data.some(item => !isNaN(Date.parse(item[key])))\n  );\n\n  if (hasTimeData && numericKeys.length > 0) {\n    return \"line\";\n  }\n\n  // If we have categorical data with numeric values, suggest pie or bar\n  if (numericKeys.length === 1 && keys.length === 2) {\n    return data.length <= 10 ? \"pie\" : \"bar\";\n  }\n\n  // If we have two numeric columns, suggest scatter\n  if (numericKeys.length >= 2) {\n    return \"scatter\";\n  }\n\n  // Default to bar chart\n  return \"bar\";\n}\n\n// Prepare data for different chart types\nexport function prepareChartData(data: any[], chartType: string): any[] {\n  if (!data || data.length === 0) return [];\n\n  switch (chartType) {\n    case \"pie\":\n      return preparePieData(data);\n    case \"bar\":\n    case \"line\":\n      return prepareBarLineData(data);\n    case \"scatter\":\n      return prepareScatterData(data);\n    case \"area\":\n      return prepareAreaData(data);\n    default:\n      return data;\n  }\n}\n\nfunction preparePieData(data: any[]): any[] {\n  // Assuming first column is label, second is value\n  const keys = Object.keys(data[0] || {});\n  if (keys.length < 2) return [];\n\n  const labelKey = keys[0];\n  const valueKey = keys[1];\n\n  return data.map(item => ({\n    name: item[labelKey],\n    value: parseFloat(item[valueKey]) || 0,\n  }));\n}\n\nfunction prepareBarLineData(data: any[]): any[] {\n  // For bar/line charts, we need x and y axis data\n  const keys = Object.keys(data[0] || {});\n  if (keys.length < 2) return [];\n\n  return data.map(item => {\n    const prepared: any = {};\n    keys.forEach(key => {\n      const value = item[key];\n      prepared[key] = isNaN(parseFloat(value)) ? value : parseFloat(value);\n    });\n    return prepared;\n  });\n}\n\nfunction prepareScatterData(data: any[]): any[] {\n  // For scatter plots, we need x and y coordinates\n  const keys = Object.keys(data[0] || {});\n  if (keys.length < 2) return [];\n\n  const xKey = keys[0];\n  const yKey = keys[1];\n\n  return data.map(item => ({\n    x: parseFloat(item[xKey]) || 0,\n    y: parseFloat(item[yKey]) || 0,\n    ...item,\n  }));\n}\n\nfunction prepareAreaData(data: any[]): any[] {\n  // Similar to bar/line but may need stacking\n  return prepareBarLineData(data);\n}\n\n// Generate default chart configuration\nexport function generateChartConfig(chartType: string, data: any[]): ChartConfig {\n  const baseConfig: ChartConfig = {\n    responsive: true,\n    maintainAspectRatio: false,\n  };\n\n  if (!data || data.length === 0) return baseConfig;\n\n  const keys = Object.keys(data[0]);\n\n  switch (chartType) {\n    case \"pie\":\n      return {\n        ...baseConfig,\n        dataKey: \"value\",\n        nameKey: \"name\",\n      };\n    case \"bar\":\n      return {\n        ...baseConfig,\n        xAxisDataKey: keys[0],\n        yAxisDataKey: keys[1],\n      };\n    case \"line\":\n      return {\n        ...baseConfig,\n        xAxisDataKey: keys[0],\n        yAxisDataKey: keys[1],\n      };\n    case \"scatter\":\n      return {\n        ...baseConfig,\n        xAxisDataKey: \"x\",\n        yAxisDataKey: \"y\",\n      };\n    case \"area\":\n      return {\n        ...baseConfig,\n        xAxisDataKey: keys[0],\n        yAxisDataKey: keys[1],\n      };\n    default:\n      return baseConfig;\n  }\n}\n\n// Format numbers for display\nexport function formatNumber(value: number): string {\n  if (value >= 1000000) {\n    return (value / 1000000).toFixed(1) + \"M\";\n  }\n  if (value >= 1000) {\n    return (value / 1000).toFixed(1) + \"K\";\n  }\n  return value.toFixed(0);\n}\n\n// Format percentage\nexport function formatPercentage(value: number): string {\n  return (value * 100).toFixed(1) + \"%\";\n}\n\n// Format currency\nexport function formatCurrency(value: number, currency = \"USD\"): string {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency,\n  }).format(value);\n}\n\n// Generate color based on index\nexport function getChartColor(index: number): string {\n  return CHART_COLORS[index % CHART_COLORS.length];\n}\n\n// Export chart data as CSV\nexport function exportToCSV(data: any[], filename: string): void {\n  if (!data || data.length === 0) return;\n\n  const keys = Object.keys(data[0]);\n  const csvContent = [\n    keys.join(\",\"), // Header\n    ...data.map(row => keys.map(key => `\"${row[key]}\"`).join(\",\"))\n  ].join(\"\\n\");\n\n  const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n  const link = document.createElement(\"a\");\n  \n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", filename);\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\n\n// Check if data has time series structure\nexport function isTimeSeriesData(data: any[]): boolean {\n  if (!data || data.length === 0) return false;\n  \n  const keys = Object.keys(data[0]);\n  return keys.some(key => \n    data.some(item => !isNaN(Date.parse(item[key])))\n  );\n}\n\n// Sort data by date column\nexport function sortByDate(data: any[], dateKey: string): any[] {\n  return [...data].sort((a, b) => {\n    const dateA = new Date(a[dateKey]);\n    const dateB = new Date(b[dateKey]);\n    return dateA.getTime() - dateB.getTime();\n  });\n}\n\n// Aggregate data by time period\nexport function aggregateByTimePeriod(\n  data: any[], \n  dateKey: string, \n  valueKey: string, \n  period: \"day\" | \"week\" | \"month\" | \"year\" = \"month\"\n): any[] {\n  const groups: { [key: string]: number[] } = {};\n\n  data.forEach(item => {\n    const date = new Date(item[dateKey]);\n    let key: string;\n\n    switch (period) {\n      case \"day\":\n        key = date.toISOString().split(\"T\")[0];\n        break;\n      case \"week\":\n        const weekStart = new Date(date);\n        weekStart.setDate(date.getDate() - date.getDay());\n        key = weekStart.toISOString().split(\"T\")[0];\n        break;\n      case \"month\":\n        key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, \"0\")}`;\n        break;\n      case \"year\":\n        key = String(date.getFullYear());\n        break;\n      default:\n        key = date.toISOString().split(\"T\")[0];\n    }\n\n    if (!groups[key]) {\n      groups[key] = [];\n    }\n    groups[key].push(parseFloat(item[valueKey]) || 0);\n  });\n\n  return Object.entries(groups).map(([key, values]) => ({\n    [dateKey]: key,\n    [valueKey]: values.reduce((sum, val) => sum + val, 0),\n    count: values.length,\n  }));\n}\n","size_bytes":8307},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}